{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { action, computed, observable } from \"mobx\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AgentStore {\n  constructor(httpClient, router) {\n    var _a;\n\n    this.httpClient = httpClient;\n    this.router = router;\n    this.isLoading = false;\n    this.agentData = null;\n    this.arrAgents = [];\n    this.arrAgentsByDepartment = [];\n    this.endpoint = 'http://localhost:3000/api';\n    this.httpHeader = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n      })\n    };\n    this.httpHeaderWithToken = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT',\n        'Authorization': 'Bearer ' + ((_a = this.agentJSONMapping()) === null || _a === void 0 ? void 0 : _a.token)\n      })\n    };\n    this.getAgents();\n  }\n\n  agentJSONMapping() {\n    const result = localStorage.getItem(\"agent_auth\") ? JSON.parse(localStorage.getItem(\"agent_auth\") || '{}') : undefined;\n    return result;\n  }\n\n  get isLoggedIn() {\n    const agent = localStorage.getItem('agent_auth');\n    return agent != null ? true : false;\n  }\n\n  login(username, email, password) {\n    try {\n      this.httpClient.post(this.endpoint + '/agents/login', JSON.stringify({\n        username,\n        email,\n        password\n      }), this.httpHeader).pipe(retry(1), catchError(this.processError)).subscribe(result => {\n        localStorage.setItem(\"agent_auth\", JSON.stringify(result));\n        this.router.navigate(['/cases']);\n        console.log(\"correct\");\n      });\n    } catch (error) {\n      console.log('login errer ln.52: ', error);\n    }\n  }\n\n  getAgents() {\n    this.isLoading = true;\n    return this.httpClient.get(this.endpoint + '/agents', this.httpHeaderWithToken).pipe(retry(1), catchError(this.processError));\n  }\n\n  getAgent() {\n    const agentData = JSON.parse(localStorage.getItem('agent_auth') || '{}');\n    if (!agentData) return;\n    return this.httpClient.get(this.endpoint + '/agents/' + agentData.id, this.httpHeaderWithToken).pipe(retry(1), catchError(this.processError));\n  } // @action\n  // async getAgentsByDepartment(departmentId: string) {\n  //   try {\n  //     const result = await this.httpClient.get<IAgent>(this.endpoint + '/tableOrder/orderId' + departmentId, this.httpHeader).toPromise();\n  //     return result;\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  //   return;\n  // }\n  // getAgentsByDepartment(): void | Observable<IAgent> {\n  //   const department = JSON.parse(localStorage.getItem('agent_auth') || '{}');\n  //   if(!department) return\n  //   return this.httpClient.get<IAgent>(this.endpoint + '/agents/:agentDepartmentId/' + department.id, this.httpHeaderWithToken)\n  //   .pipe(\n  //     retry(1),\n  //     catchError(this.processError)\n  //   )\n  // }\n  // @action\n  // getAgentsByDepartment(departmentId): Observable<IAgent> {\n  //   return this.httpClient.get<IAgent>(this.endpoint + '/agents/:agentDepartmentId/' + departmentId, this.httpHeader)\n  // }\n  // @action\n  // async getAgentsByDepartment(departmentId) {\n  //   //const departmentId = JSON.parse(localStorage.getItem('agent_auth') || '{}');\n  //   try {\n  //     const result = await this.httpClient.get<IAgent>(this.endpoint + '/agents/:agentDepartmentId/' + departmentId, this.httpHeader).subscribe((data: any) => {\n  //       this.arrAgentsByDepartment = data;\n  //     });\n  //     return result;\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  //   return;\n  // }\n\n\n  getAgentsByDepartment() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const agentDepartmentId = ''; //const agentDepartment = JSON.parse(localStorage.getItem('agent_auth') || '{}');\n\n        if (!agentDepartmentId) return;\n        this.arrAgents = yield this.httpClient.get(this.endpoint + '/agents/' + agentDepartmentId + '/departmentId', this.httpHeaderWithToken).toPromise(); //return result;\n\n        console.log(result);\n      } catch (error) {\n        console.log(error);\n      }\n\n      return;\n    });\n  } // const auth = localStorage.getItem('agent_auth');\n  // if (auth) {\n  //   const abc = JSON.parse(auth);\n  //   console.log(abc);\n  // }\n  // @action\n  // getAgent(id, data): Observable<IAgent> {\n  //   return this.httpClient.get<IAgent>(this.endpoint + '/agents/' + id, this.httpHeader)\n  //   .pipe(\n  //     retry(1),\n  //     catchError(this.processError)\n  //   )\n  // }\n\n\n  addAgent(data) {\n    return this.httpClient.post(this.endpoint + '/agents/create', JSON.stringify(data), this.httpHeader).pipe(retry(1), catchError(this.processError));\n  } // @action\n  // getAgentsByDepartment(): Observable<IAgent> {\n  //   this.isLoading = true;\n  //   return this.httpClient.get<IAgent>(this.endpoint + '/agents/', this.httpHeaderWithToken)\n  //   .pipe(\n  //     retry(1),\n  //     catchError(this.processError)\n  //   )\n  // }\n  // @action\n  // getAgentsByDepartment(): void | Observable<IAgent> {\n  //   const agentData = JSON.parse(localStorage.getItem('agent_auth') || '{}');\n  //   if(!agentData) return\n  //   return this.httpClient.get<IAgent>(this.endpoint + '/agents/' + agentData.id, this.httpHeaderWithToken)\n  //   .pipe(\n  //     retry(1),\n  //     catchError(this.processError)\n  //   )\n  // }\n  // @action\n  // getAgentsByDepartment(): Observable<IAgent> {\n  //   return this.httpClient.post<IAgent>()\n  // }\n\n\n  updateAgent(agentData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const result = yield this.httpClient.put(this.endpoint + '/agents/' + agentData.id, JSON.stringify(agentData), this.httpHeader).toPromise();\n        return result;\n      } catch (error) {\n        console.log(error);\n      }\n\n      return;\n    });\n  }\n\n  deleteAgent(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.httpClient.delete(this.endpoint + '/agents/' + id, this.httpHeader).toPromise();\n      return result;\n    });\n  }\n\n  processError(err) {\n    let message = '';\n\n    if (err.error instanceof ErrorEvent) {\n      message = err.error.message;\n    } else {\n      message = `Error Code: ${err.status}\\nMessage: ${err.message}`;\n    }\n\n    console.log(message);\n    return throwError(message);\n  }\n\n}\n\nAgentStore.ɵfac = function AgentStore_Factory(t) {\n  return new (t || AgentStore)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAgentStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AgentStore,\n  factory: AgentStore.ɵfac,\n  providedIn: 'root'\n});\n\n__decorate([observable], AgentStore.prototype, \"isLoading\", void 0);\n\n__decorate([observable], AgentStore.prototype, \"agent\", void 0);\n\n__decorate([observable], AgentStore.prototype, \"agentData\", void 0);\n\n__decorate([observable], AgentStore.prototype, \"arrAgents\", void 0);\n\n__decorate([observable], AgentStore.prototype, \"selectedAgent\", void 0);\n\n__decorate([observable], AgentStore.prototype, \"arrAgentsByDepartment\", void 0);\n\n__decorate([computed], AgentStore.prototype, \"isLoggedIn\", null);\n\n__decorate([action], AgentStore.prototype, \"login\", null);\n\n__decorate([action], AgentStore.prototype, \"getAgents\", null);\n\n__decorate([action], AgentStore.prototype, \"getAgentsByDepartment\", null);\n\n__decorate([action], AgentStore.prototype, \"addAgent\", null);\n\n__decorate([action], AgentStore.prototype, \"updateAgent\", null);\n\n__decorate([action], AgentStore.prototype, \"deleteAgent\", null);","map":null,"metadata":{},"sourceType":"module"}