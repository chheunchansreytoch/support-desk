{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AlertInformationDialogComponent } from '../../alert-information-dialog/alert-information-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/stores/agent.store\";\nimport * as i3 from \"src/app/stores/manager.store\";\nimport * as i4 from \"src/app/stores/case.store\";\nimport * as i5 from \"@angular/material/dialog\";\nexport let AssignToDialogComponent = /*#__PURE__*/(() => {\n  class AssignToDialogComponent {\n    constructor(formBuilder, agentStore, managerStore, caseStore, dialog, dialogRef, data) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n      this.formBuilder = formBuilder;\n      this.agentStore = agentStore;\n      this.managerStore = managerStore;\n      this.caseStore = caseStore;\n      this.dialog = dialog;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.getDepartmentIdFromFormData = '';\n      this.agentsBySelectedDepartment = [];\n      this.assignForm = formBuilder.group({\n        caseNumber: new FormControl((_a = data === null || data === void 0 ? void 0 : data.caseNumber) !== null && _a !== void 0 ? _a : '', Validators.required),\n        status: new FormControl((_c = (_b = data === null || data === void 0 ? void 0 : data.status) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : 'New', Validators.required),\n        priority: new FormControl((_e = (_d = data === null || data === void 0 ? void 0 : data.priority) === null || _d === void 0 ? void 0 : _d.id) !== null && _e !== void 0 ? _e : 'High', Validators.required),\n        agentDepartment: new FormControl((_h = (_g = (_f = data === null || data === void 0 ? void 0 : data.agent) === null || _f === void 0 ? void 0 : _f.agentDepartment) === null || _g === void 0 ? void 0 : _g.id) !== null && _h !== void 0 ? _h : '', Validators.required),\n        agent: new FormControl('', Validators.required),\n        subject: new FormControl((_j = data === null || data === void 0 ? void 0 : data.subject) !== null && _j !== void 0 ? _j : '', Validators.required),\n        description: new FormControl((_k = data === null || data === void 0 ? void 0 : data.description) !== null && _k !== void 0 ? _k : '', Validators.required)\n      });\n    }\n\n    ngOnInit() {\n      var _a, _b, _c, _d, _e;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.data) {\n          const id = (_c = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.agent) === null || _b === void 0 ? void 0 : _b.agentDepartment) === null || _c === void 0 ? void 0 : _c.id;\n          const agents = yield this.agentStore.getAgentsByDepartment(id);\n          this.agentsBySelectedDepartment = agents;\n          this.assignForm.controls['agent'].setValue((_e = (_d = this.data) === null || _d === void 0 ? void 0 : _d.agent) === null || _e === void 0 ? void 0 : _e.id);\n        }\n      });\n    }\n\n    selectDepartmentChanged(event) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const id = event.target.value;\n        const agents = yield this.agentStore.getAgentsByDepartment(id);\n        this.agentsBySelectedDepartment = agents;\n      });\n    }\n\n    formSubmitted(formData) {\n      return __awaiter(this, void 0, void 0, function* () {\n        //console.log(formData.agentDepartment);\n        if (this.assignForm.valid) {\n          const {\n            status,\n            priority,\n            agent\n          } = formData;\n\n          if (this.data) {\n            const caseData = Object.assign(Object.assign({}, formData), {\n              createdBy: this.managerStore.getCurrentUser.id,\n              status: {\n                id: status\n              },\n              priority: {\n                id: priority\n              },\n              agent: {\n                id: agent\n              },\n              id: this.data.id\n            });\n            yield this.caseStore.updateCase(caseData);\n          }\n\n          this.assignForm.enable();\n          this.assignForm.reset();\n          this.dialog.open(AlertInformationDialogComponent, {\n            width: '500px',\n            data: {\n              title: this.data ? 'Update Case' : 'Create Case',\n              type: 'success',\n              content: this.data ? `Case is updated.` : `Case is created.`\n            },\n            disableClose: true\n          });\n        }\n\n        this.getDepartmentIdFromFormData = formData.agentDepartment;\n        console.log(this.getDepartmentIdFromFormData);\n        return;\n      });\n    }\n\n  }\n\n  AssignToDialogComponent.ɵfac = function AssignToDialogComponent_Factory(t) {\n    return new (t || AssignToDialogComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AgentStore), i0.ɵɵdirectiveInject(i3.ManagerStore), i0.ɵɵdirectiveInject(i4.CaseStore), i0.ɵɵdirectiveInject(i5.MatDialog), i0.ɵɵdirectiveInject(i5.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n\n  AssignToDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AssignToDialogComponent,\n    selectors: [[\"app-assign-to-dialog\"]],\n    decls: 2,\n    vars: 0,\n    template: function AssignToDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"assign-to-dialog works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\"]\n  });\n  return AssignToDialogComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}