{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { action, observable } from \"mobx\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AgentDepartmentStore {\n  constructor(httpClient, router) {\n    this.httpClient = httpClient;\n    this.router = router;\n    this.isLoading = false;\n    this.endpoint = 'http://localhost:3000/api';\n    this.httpHeader = {\n      headers: new HttpHeaders({\n        'enctype': 'multipart/form-data',\n        // 'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n      })\n    };\n    this.httpHeaderWithToken = {\n      headers: new HttpHeaders({\n        'enctype': 'multipart/form-data',\n        // 'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT' //'Authorization': 'Bearer ' + this.agentDepartmentJSONMapping()?.token\n\n      })\n    };\n    this.getAgentDepartments();\n  }\n\n  agentDepartmentJSONMapping() {\n    const result = localStorage.getItem(\"agentDepartment_auth\") ? JSON.parse(localStorage.getItem(\"agentDepartment_auth\") || '{}') : undefined;\n    return result;\n  }\n\n  getAgentDepartments() {\n    return this.httpClient.get(this.endpoint + '/agentDepartments', this.httpHeaderWithToken).pipe(retry(1), catchError(this.processError));\n  }\n\n  getAgent(id, data) {\n    return this.httpClient.get(this.endpoint + '/agentDepartments/' + id, this.httpHeader).pipe(retry(1), catchError(this.processError));\n  } // @action\n  // async getAgentsByDepartment() {\n  //   try {\n  //     const agentDepartment = JSON.parse(localStorage.getItem('agent_auth') || '{}');\n  //     if(!agentDepartment) return\n  //     const result = await this.httpClient.get<IAgentDepartment>(this.endpoint + '/agentDepartments/' + agentDepartment.id + '/departmentId', this.httpHeaderWithToken).toPromise()\n  //     //return result;\n  //     console.log(result);\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  //  return;\n  // }\n\n\n  addAgent(data) {\n    return this.httpClient.post(this.endpoint + '/agentDepartments/create', JSON.stringify(data), this.httpHeader).pipe(retry(1), catchError(this.processError));\n  } // @action\n  // updateUser(id, data): Observable<IManager> {\n  //   return this.httpClient.put<IManager>(this.endpoint + '/managers/' + id, JSON.stringify(data), this.httpHeader)\n  //   .pipe(\n  //     retry(1),\n  //     catchError(this.processError)\n  //   )\n  // }\n\n\n  deleteAgent(id) {\n    return this.httpClient.delete(this.endpoint + '/agentDepartments/' + id, this.httpHeader).pipe(retry(1), catchError(this.processError));\n  }\n\n  processError(err) {\n    let message = '';\n\n    if (err.error instanceof ErrorEvent) {\n      message = err.error.message;\n    } else {\n      message = `Error Code: ${err.status}\\nMessage: ${err.message}`;\n    }\n\n    console.log(message);\n    return throwError(message);\n  }\n\n}\n\nAgentDepartmentStore.ɵfac = function AgentDepartmentStore_Factory(t) {\n  return new (t || AgentDepartmentStore)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAgentDepartmentStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AgentDepartmentStore,\n  factory: AgentDepartmentStore.ɵfac,\n  providedIn: 'root'\n});\n\n__decorate([observable], AgentDepartmentStore.prototype, \"isLoading\", void 0);\n\n__decorate([observable], AgentDepartmentStore.prototype, \"agentDepartment\", void 0);\n\n__decorate([action], AgentDepartmentStore.prototype, \"getAgentDepartments\", null);\n\n__decorate([action], AgentDepartmentStore.prototype, \"getAgent\", null);\n\n__decorate([action], AgentDepartmentStore.prototype, \"addAgent\", null);\n\n__decorate([action], AgentDepartmentStore.prototype, \"deleteAgent\", null);","map":null,"metadata":{},"sourceType":"module"}