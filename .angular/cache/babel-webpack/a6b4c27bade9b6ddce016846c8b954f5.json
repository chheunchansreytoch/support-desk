{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { action, computed, observable } from \"mobx\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ChatStore {\n  constructor(httpClient, router) {\n    var _a;\n\n    this.httpClient = httpClient;\n    this.router = router;\n    this.isLoading = false;\n    this.endpoint = 'http://localhost:3000/api';\n    this.httpHeader = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n      })\n    };\n    this.httpHeaderWithToken = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT',\n        'Authorization': 'Bearer ' + ((_a = this.caseJSONMapping()) === null || _a === void 0 ? void 0 : _a.token)\n      })\n    };\n    this.getChats();\n  }\n\n  caseJSONMapping() {\n    const result = localStorage.getItem(\"case_auth\") ? JSON.parse(localStorage.getItem(\"case_auth\") || '{}') : undefined;\n    return result;\n  }\n\n  get isLoggedIn() {\n    const agent = localStorage.getItem('case_auth');\n    return agent != null ? true : false;\n  }\n\n  getChats() {\n    return this.httpClient.get(this.endpoint + '/chats', this.httpHeaderWithToken).pipe(retry(1), catchError(this.processError));\n  }\n\n  getCase(id, data) {\n    return this.httpClient.get(this.endpoint + '/chats/' + id, this.httpHeader).pipe(retry(1), catchError(this.processError));\n  }\n\n  sendEmailMessage(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.isLoading = true;\n        const result = this.httpClient.post(this.endpoint + '/chats/send', JSON.stringify(data), this.httpHeader);\n        return result;\n      } catch (error) {\n        console.log(error);\n      }\n\n      return;\n    });\n  } // @action\n  // addCase(data: ICase): Observable<ICase> {\n  //   return this.httpClient.post<ICase>(this.endpoint + '/cases/create', JSON.stringify(data), this.httpHeader)\n  //   .pipe(\n  //     retry(1),\n  //     catchError(this.processError)\n  //   )\n  // }\n  // @action\n  // async updateCase(caseData: any) {\n  //   console.log(caseData.id);\n  //   try {\n  //     const result = await this.httpClient.put<ICase>(this.endpoint + '/cases/' + caseData.id, JSON.stringify(caseData), this.httpHeader).toPromise();\n  //     return result;\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  //   return;\n  // }\n  // @action\n  // async deleteCase(id){\n  //   const result = await this.httpClient.delete<ICase>(this.endpoint + '/cases/' + id, this.httpHeader).toPromise();\n  //   return result;\n  // }\n\n\n  processError(err) {\n    let message = '';\n\n    if (err.error instanceof ErrorEvent) {\n      message = err.error.message;\n    } else {\n      message = `Error Code: ${err.status}\\nMessage: ${err.message}`;\n    }\n\n    console.log(message);\n    return throwError(message);\n  }\n\n}\n\nChatStore.ɵfac = function ChatStore_Factory(t) {\n  return new (t || ChatStore)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nChatStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatStore,\n  factory: ChatStore.ɵfac,\n  providedIn: 'root'\n});\n\n__decorate([observable], ChatStore.prototype, \"isLoading\", void 0);\n\n__decorate([observable], ChatStore.prototype, \"chats\", void 0);\n\n__decorate([computed], ChatStore.prototype, \"isLoggedIn\", null);\n\n__decorate([action], ChatStore.prototype, \"getChats\", null);\n\n__decorate([action], ChatStore.prototype, \"getCase\", null);\n\n__decorate([action], ChatStore.prototype, \"sendEmailMessage\", null);","map":null,"metadata":{},"sourceType":"module"}