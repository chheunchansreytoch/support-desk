{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { action, computed, observable } from \"mobx\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class CaseStore {\n  constructor(httpClient, router) {\n    var _a;\n\n    this.httpClient = httpClient;\n    this.router = router;\n    this.isLoading = false;\n    this.endpoint = 'http://localhost:3000/api';\n    this.httpHeader = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n      })\n    };\n    this.httpHeaderWithToken = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT',\n        'Authorization': 'Bearer ' + ((_a = this.caseJSONMapping()) === null || _a === void 0 ? void 0 : _a.token)\n      })\n    };\n    this.getCases();\n  }\n\n  caseJSONMapping() {\n    const result = localStorage.getItem(\"case_auth\") ? JSON.parse(localStorage.getItem(\"case_auth\") || '{}') : undefined;\n    return result;\n  }\n\n  get isLoggedIn() {\n    const agent = localStorage.getItem('case_auth');\n    return agent != null ? true : false;\n  }\n\n  getCases() {\n    return this.httpClient.get(this.endpoint + '/cases', this.httpHeaderWithToken).pipe(retry(1), catchError(this.processError));\n  }\n\n  getCase(id, data) {\n    return this.httpClient.get(this.endpoint + '/cases/' + id, this.httpHeader).pipe(retry(1), catchError(this.processError));\n  }\n\n  getClosedCases() {\n    return this.httpClient.get(this.endpoint + '/cases/closed', this.httpHeaderWithToken).pipe(retry(1), catchError(this.processError));\n  }\n\n  getClosedCase(caseId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.isLoading = true;\n        const result = yield this.httpClient.get(this.endpoint + '/cases/closed/' + caseId, this.httpHeader).toPromise();\n        return result;\n      } catch (error) {\n        this.isLoading = false;\n        console.log(error);\n      }\n\n      return;\n    });\n  }\n\n  getOpenCases(id) {\n    return this.httpClient.get(this.endpoint + '/cases/open/' + id, this.httpHeaderWithToken).pipe(retry(1), catchError(this.processError));\n  } // @action\n  // async getOpenCases() {\n  //   try {\n  //     this.isLoading = true;\n  //     const result = await this.httpClient.get<ICase>(this.endpoint + '/cases/open', this.httpHeaderWithToken).toPromise();\n  //     return result;\n  //   } catch (error) {\n  //     this.isLoading = false;\n  //     console.log(error);\n  //   }\n  //   return;\n  // }\n\n\n  getOpenCase(caseId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.isLoading = true;\n        const result = yield this.httpClient.get(this.endpoint + '/cases/open/' + caseId, this.httpHeader).toPromise();\n        return result;\n      } catch (error) {\n        this.isLoading = false;\n        console.log(error);\n      }\n\n      return;\n    });\n  }\n\n  addCase(data) {\n    return this.httpClient.post(this.endpoint + '/cases/create', JSON.stringify(data), this.httpHeader).pipe(retry(1), catchError(this.processError));\n  }\n\n  updateCase(caseData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log(caseData.id);\n\n      try {\n        const result = yield this.httpClient.put(this.endpoint + '/cases/' + caseData.id, JSON.stringify(caseData), this.httpHeader).toPromise();\n        return result;\n      } catch (error) {\n        console.log(error);\n      }\n\n      return;\n    });\n  }\n\n  deleteCase(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.httpClient.delete(this.endpoint + '/cases/' + id, this.httpHeader).toPromise();\n      return result;\n    });\n  }\n\n  processError(err) {\n    let message = '';\n\n    if (err.error instanceof ErrorEvent) {\n      message = err.error.message;\n    } else {\n      message = `Error Code: ${err.status}\\nMessage: ${err.message}`;\n    }\n\n    console.log(message);\n    return throwError(message);\n  }\n\n}\n\nCaseStore.ɵfac = function CaseStore_Factory(t) {\n  return new (t || CaseStore)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nCaseStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CaseStore,\n  factory: CaseStore.ɵfac,\n  providedIn: 'root'\n});\n\n__decorate([observable], CaseStore.prototype, \"isLoading\", void 0);\n\n__decorate([observable], CaseStore.prototype, \"cases\", void 0);\n\n__decorate([computed], CaseStore.prototype, \"isLoggedIn\", null);\n\n__decorate([action], CaseStore.prototype, \"getCases\", null);\n\n__decorate([action], CaseStore.prototype, \"getCase\", null);\n\n__decorate([action], CaseStore.prototype, \"getClosedCases\", null);\n\n__decorate([action], CaseStore.prototype, \"getClosedCase\", null);\n\n__decorate([action], CaseStore.prototype, \"getOpenCases\", null);\n\n__decorate([action], CaseStore.prototype, \"getOpenCase\", null);\n\n__decorate([action], CaseStore.prototype, \"addCase\", null);\n\n__decorate([action], CaseStore.prototype, \"updateCase\", null);\n\n__decorate([action], CaseStore.prototype, \"deleteCase\", null);","map":null,"metadata":{},"sourceType":"module"}