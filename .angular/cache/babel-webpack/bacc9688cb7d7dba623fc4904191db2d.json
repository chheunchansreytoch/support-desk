{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { DialogDeleteComponent } from 'src/app/components/dialogs/crud-manageCase-page/dialog-delete/dialog-delete.component';\nimport { AlertInformationDialogComponent } from 'src/app/components/alert-information-dialog/alert-information-dialog.component';\nimport { CreateCaseDialogComponent } from 'src/app/components/dialogs/create-case-dialog/create-case-dialog.component';\nimport { ConfirmationDialogComponent } from 'src/app/components/confirmation-dialog/confirmation-dialog.component';\nlet ManageCasesPageComponent = class ManageCasesPageComponent {\n  constructor(dialog, dialogService, caseStore, agentStore, agentDepartmentStore, statusStore, priorityStore, managerStore, formBuilder, paginationStore) {\n    this.dialog = dialog;\n    this.dialogService = dialogService;\n    this.caseStore = caseStore;\n    this.agentStore = agentStore;\n    this.agentDepartmentStore = agentDepartmentStore;\n    this.statusStore = statusStore;\n    this.priorityStore = priorityStore;\n    this.managerStore = managerStore;\n    this.formBuilder = formBuilder;\n    this.paginationStore = paginationStore;\n    this.selectedValue = 'none';\n    this.arrCases = [];\n    this.arrAgents = [];\n    this.arrAgentDepartment = [];\n    this.arrAgentsByDepartment = [];\n    this.arrStatuses = [];\n    this.arrPriorities = [];\n    this.arrManagers = [];\n    this.getDepartmentIdFromFormData = '';\n    this.agentsBySelectedDepartment = []; //createCasetoogleTag\n\n    this.showCasePopup = false; //assignCasetoogleTag\n\n    this.showAssignPopup = false; //department button\n\n    this.showdepartmentBtn = false; // *** create select departments ***\n\n    this.SelectAgentName = '';\n    this.departments_IT = [{\n      all: \"\",\n      name: \"Chheun Chansreytoch\",\n      status: \"Working\"\n    }, {\n      all: \"\",\n      name: \"Chheun Chansreytoch\",\n      status: \"Closed\"\n    }, {\n      all: \"\",\n      name: \"Chheun Chansreytoch\",\n      status: \"Working\"\n    }, {\n      all: \"\",\n      name: \"Chheun Chansreytoch\",\n      status: \"Closed\"\n    }, {\n      all: \"\",\n      name: \"Chheun Chansreytoch\",\n      status: \"Closed\"\n    }, {\n      all: \"\",\n      name: \"Chheun Chansreytoch\",\n      status: \"Working\"\n    }, {\n      all: \"\",\n      name: \"Chheun Chansreytoch\",\n      status: \"Working\"\n    }, {\n      all: \"\",\n      name: \"Chheun Chansreytoch\",\n      status: \"Working\"\n    }, {\n      all: \"\",\n      name: \"Chheun Chansreytoch\",\n      status: \"Closed\"\n    }]; // checkbox table\n\n    this.checks = false; // checkToAssign list\n\n    this.Checked = false;\n    this.creatingCaseForm = formBuilder.group({\n      caseNumber: new FormControl('', Validators.required),\n      status: new FormControl('New', Validators.required),\n      priority: new FormControl('High', Validators.required),\n      agentDepartment: new FormControl('', Validators.required),\n      agent: new FormControl('', Validators.required),\n      subject: new FormControl('', Validators.required),\n      description: new FormControl('', Validators.required)\n    }, {});\n  }\n\n  ngOnInit() {\n    this.fetchCases();\n    this.fetchStatuses();\n    this.fetchPriorities();\n    this.fetchManagers();\n    this.fetchAgentsDepartment();\n    this.fetchAgentsByDepartment();\n    const obj = document.getElementById(\"animatedNumber0\");\n    this.animateValue(obj, 0, 260, 2000);\n  }\n\n  animateValue(obj, start, end, duration) {\n    let startTimestamp = null || 0;\n\n    const step = timestamp => {\n      if (!startTimestamp) startTimestamp = timestamp;\n      const progress = Math.min((timestamp - startTimestamp) / duration, 1);\n      obj.innerHTML = Math.floor(progress * (end - start) + start);\n\n      if (progress < 1) {\n        window.requestAnimationFrame(step);\n      }\n    };\n\n    window.requestAnimationFrame(step);\n  }\n\n  fetchCases() {\n    this.caseStore.getCases().subscribe(res => {\n      this.arrCases = res;\n    });\n  }\n\n  fetchAgentsDepartment() {\n    this.agentDepartmentStore.getAgentDepartments().subscribe(res => {\n      this.arrAgentDepartment = res;\n    });\n  }\n\n  fetchAgentsByDepartment() {\n    this.agentStore.getAgentsByDepartment(this.getDepartmentIdFromFormData).then(res => {\n      this.arrAgentsByDepartment = res;\n    });\n  }\n\n  fetchStatuses() {\n    this.statusStore.getStatuses().subscribe(res => {\n      this.arrStatuses = res;\n    });\n  }\n\n  fetchPriorities() {\n    this.priorityStore.getPriorities().subscribe(res => {\n      this.arrPriorities = res;\n    });\n  }\n\n  fetchManagers() {\n    this.managerStore.getManagers().subscribe(res => {\n      this.arrManagers = res;\n    });\n  }\n\n  selectDepartmentChanged(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const id = event.target.value;\n      const agents = yield this.agentStore.getAgentsByDepartment(id);\n      this.agentsBySelectedDepartment = agents;\n    });\n  }\n\n  btnSubmitClicked() {}\n\n  formSubmitted(formData) {\n    //console.log(formData.agentDepartment);\n    if (this.creatingCaseForm.valid) {\n      const {\n        status,\n        priority,\n        agent\n      } = formData;\n      console.log(formData);\n      const finalData = Object.assign(Object.assign({}, formData), {\n        createdBy: this.managerStore.getCurrentUser.id,\n        status: {\n          id: status\n        },\n        priority: {\n          id: priority\n        },\n        agent: {\n          id: agent\n        }\n      });\n      this.caseStore.addCase(finalData).subscribe(res => {\n        // console.log(res);\n        this.arrManagers.push(finalData);\n        this.creatingCaseForm.reset();\n        this.fetchCases();\n        this.createCasetoogleTag();\n        alert(\"Case was created successfully!\");\n      });\n    }\n\n    this.getDepartmentIdFromFormData = formData.agentDepartment;\n    console.log(this.getDepartmentIdFromFormData);\n    return;\n  }\n\n  onCreate(item) {\n    const dialogRef = this.dialog.open(CreateCaseDialogComponent, {\n      width: '600px',\n      height: '96vh',\n      data: item\n    });\n    dialogRef.updatePosition({\n      top: '2vh',\n      right: '2vh'\n    });\n    dialogRef.afterClosed().subscribe(() => {\n      this.fetchCases();\n    });\n  }\n\n  onMoreDetailDialog() {\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {\n      width: '500px',\n      data: {\n        title: 'Delete Case',\n        type: 'question',\n        content: 'Are you sure that you want to delete this selected case?'\n      },\n      disableClose: true\n    });\n  }\n\n  onSelectedAgent(caseId) {\n    if (caseId) {\n      const dialogRef = this.dialog.open(ConfirmationDialogComponent, {\n        width: '500px',\n        data: {\n          title: 'Delete Case',\n          type: 'question',\n          content: 'Are you sure that you want to delete this selected case?'\n        },\n        disableClose: true\n      });\n      dialogRef.afterClosed().subscribe(result => __awaiter(this, void 0, void 0, function* () {\n        if (!result || result === 'no') return;\n        yield this.caseStore.deleteCase(caseId);\n        this.dialog.open(AlertInformationDialogComponent, {\n          width: '500px',\n          data: {\n            title: 'Delete Case',\n            type: 'success',\n            content: `Case is deleted.`\n          },\n          disableClose: true\n        }); //this.paginationStore.getAgentsWithPagination(10, 0, '');\n      }));\n    }\n\n    return;\n  }\n\n  createCasetoogleTag() {\n    this.showCasePopup = !this.showCasePopup;\n  }\n\n  assignCasetoogleTag() {\n    this.showAssignPopup = !this.showAssignPopup; //this.createCasetoogleTag();\n  }\n\n  departmentBtn() {\n    this.showdepartmentBtn = !this.showdepartmentBtn;\n  }\n\n  onClickDelete(caseId) {\n    if (caseId) {\n      const dialogRef = this.dialog.open(DialogDeleteComponent, {\n        width: '500px',\n        data: {\n          title: 'Delete Case',\n          type: 'question',\n          content: 'Are you sure that you want to delete this selected case?'\n        },\n        disableClose: true\n      });\n      dialogRef.afterClosed().subscribe(result => __awaiter(this, void 0, void 0, function* () {\n        if (!result || result === 'no') return;\n        yield this.caseStore.deleteCase(caseId).then(res => {\n          this.fetchCases();\n        });\n        this.dialog.open(AlertInformationDialogComponent, {\n          width: '500px',\n          data: {\n            title: 'Delete Case',\n            type: 'success',\n            content: `Case is deleted.`\n          },\n          disableClose: true\n        }); // this.paginationStore.getCasesWithPagination(10, 0, '');\n      }));\n    }\n\n    return;\n  } // onClickUpdate(caseId) {\n  //   const dialogRef = this.dialog.open(DialogUpdateComponent, {\n  //     data: caseId,\n  //     width: '600px',\n  //     height: '96vh',\n  //     role: 'dialog',\n  //   });\n  //   dialogRef.updatePosition({top: '2vh', right: '2vh'});\n  //   dialogRef.afterClosed().subscribe(() => {\n  //     this.fetchCases();\n  //   })\n  // }\n  // onClickUpdate(caseId) {\n  //   if(caseId) {\n  //     const dialogRef = this.dialog.open(DialogUpdateComponent, {\n  //       data: caseId\n  //     });\n  //     dialogRef.afterClosed().subscribe(async (result: any) => {\n  //       if(!result) return;\n  //       await this.caseStore(result);\n  //       console.log(result);\n  //       alert(\"The Case was updated successfully!\");\n  //     });\n  //   }\n  //   return;\n  //}\n\n\n  convertUTCtoDate(UTC) {\n    const date = new Date(UTC); //const strDate = date.toLocaleDateString();\n\n    const strDate = date.toLocaleDateString();\n    return strDate;\n  }\n\n  radioChangeHandler(e) {\n    this.SelectAgentName = e.target.value;\n  }\n\n  checkAll(e) {\n    if (e.target.checked == true) {\n      this.checks = true;\n    } else {\n      this.checks = false;\n    }\n  }\n\n  isChecked(e) {\n    if (e.target.checked == true) {\n      this.Checked = true;\n    } else {\n      this.Checked = false;\n    }\n  }\n\n};\nManageCasesPageComponent = __decorate([Component({\n  selector: 'app-manage-cases-page',\n  templateUrl: './manage-cases-page.component.html',\n  styleUrls: ['./manage-cases-page.component.scss']\n})], ManageCasesPageComponent);\nexport { ManageCasesPageComponent };","map":null,"metadata":{},"sourceType":"module"}