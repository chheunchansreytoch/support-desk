{"ast":null,"code":"\"use strict\"; // import { Component, Inject, OnInit } from '@angular/core';\n// import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\n// import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n// import { IDialogData } from 'src/app/models/IDialog.model';\n// import { AgentStore } from 'src/app/stores/agent.store';\n// import { AgentDepartmentStore } from 'src/app/stores/agentDepartment.store';\n// import { CaseStore } from 'src/app/stores/case.store';\n// import { PriorityStore } from 'src/app/stores/priority.store';\n// import { StatusStore } from 'src/app/stores/status.store';\n// import { AlertInformationDialogComponent } from '../../alert-information-dialog/alert-information-dialog.component';\n// @Component({\n//   selector: 'app-create-case-dialog',\n//   templateUrl: './create-case-dialog.component.html',\n//   styleUrls: ['./create-case-dialog.component.scss']\n// })\n// export class CreateCaseDialogComponent implements OnInit {\n//   registrationForm: FormGroup;\n//   arrAgentDepartments: Array<any> = [];\n//   arrAgentsByDepartments: Array<any> = [];\n//   arrStatuses: Array<any> = [];\n//   arrPriorities: Array<any> = [];\n//   getDepartmentIdFromFormData= '';\n//   constructor(\n//     private caseStore: CaseStore,\n//     private dialog: MatDialog,\n//     public agentStore: AgentStore,\n//     private agentDepartmentStore: AgentDepartmentStore,\n//     private statusStore: StatusStore,\n//     private priorityStore: PriorityStore,\n//     private formBuilder: FormBuilder,\n//     public dialogRef: MatDialogRef<CreateCaseDialogComponent>,\n//     @Inject(MAT_DIALOG_DATA) public data: any,\n//   ) {\n//     this.registrationForm = formBuilder.group({\n//       caseNumber: new FormControl('', Validators.required),\n//       status: new FormControl('New', Validators.required),\n//       priority: new FormControl('High', Validators.required),\n//       agentDepartment: new FormControl('', Validators.required),\n//       agent:  new  FormControl('', Validators.required),\n//       subject: new FormControl('', Validators.required),\n//       description: new FormControl('', Validators.required),\n//     }, {\n//     });\n//    }\n//   ngOnInit(): void {\n//   }\n//   async formSubmitted(formData: any) {\n//     if (this.registrationForm.valid) {\n//       this.registrationForm.disable();\n//       const { caseNumber, status, priority, agentDepartment, agent, subject, description} = formData;\n//       if(!this.data) {\n//         const fd = new FormData();\n//         fd.append('caseNumber', caseNumber);\n//         fd.append('status', status);\n//         fd.append('priority', priority);\n//         fd.append('agentDepartment', agentDepartment);\n//         fd.append('agent', agent);\n//         fd.append('subject', subject);\n//         fd.append('description', description);\n//         // fd.append('description', this.description?.item(0) as any, this.selectedProfiles?.item(0)?.name);\n//         // fd.append('createdBy', this.managerStore.getCurrentUser.id)\n//         await this.caseStore.addCase_FormData(fd);\n//       } else {\n//         const fd = new FormData();\n//         fd.append('caseNumber', caseNumber);\n//         fd.append('status', status);\n//         fd.append('priority', priority);\n//         fd.append('agentDepartment', agentDepartment);\n//         fd.append('agent', agent);\n//         fd.append('subject', subject);\n//         fd.append('description', description);\n//         await this.caseStore.updateCaseFormData(this.data?.id, fd);\n//       }\n//       this.registrationForm.enable();\n//       this.registrationForm.reset();\n//       this.dialog.open(AlertInformationDialogComponent, {\n//         width: '500px',\n//         data: {\n//           title: this.data ? 'Update Agent' : 'Create Agent',\n//           type: 'success',\n//           content: this.data ? `Agent is updated.` : `Agent is created.`\n//         } as IDialogData,\n//         disableClose: true,\n//       });\n//     }\n//     return;\n//   }\n//   fetchAgentsDepartment() {\n//     this.agentDepartmentStore.getAgentDepartments().subscribe((res: any) => {\n//       this.arrAgentDepartments = res;\n//     });\n//   }\n//   fetchAgentsByDepartment() {\n//     this.agentStore.getAgentsByDepartment(this.getDepartmentIdFromFormData).then((res: any) => {\n//       this.arrAgentsByDepartments = res;\n//     });\n//   }\n//   fetchStatuses() {\n//     this.statusStore.getStatuses().subscribe((res: any) => {\n//       this.arrStatuses = res;\n//     })\n//   }\n//   fetchPriorities() {\n//     this.priorityStore.getPriorities().subscribe((res: any) => {\n//       this.arrPriorities = res;\n//     })\n//   }\n// }","map":null,"metadata":{},"sourceType":"script"}