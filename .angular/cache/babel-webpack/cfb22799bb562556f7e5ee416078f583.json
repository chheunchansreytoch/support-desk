{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { action, computed, observable } from \"mobx\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AgentStore {\n  constructor(httpClient, router) {\n    var _a;\n\n    this.httpClient = httpClient;\n    this.router = router;\n    this.isLoading = false;\n    this.agentData = null;\n    this.endpoint = 'http://localhost:3000/api';\n    this.httpHeader = {\n      headers: new HttpHeaders({\n        'enctype': 'multipart/form-data',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n      })\n    };\n    this.httpHeaderWithToken = {\n      headers: new HttpHeaders({\n        'enctype': 'multipart/form-data',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT',\n        'Authorization': 'Bearer ' + ((_a = this.agentJSONMapping()) === null || _a === void 0 ? void 0 : _a.token)\n      })\n    };\n    this.getAgents();\n  }\n\n  agentJSONMapping() {\n    const result = localStorage.getItem(\"agent_auth\") ? JSON.parse(localStorage.getItem(\"agent_auth\") || '{}') : undefined;\n    return result;\n  }\n\n  get isLoggedIn() {\n    const agent = localStorage.getItem('agent_auth');\n    return agent != null ? true : false;\n  }\n\n  login(username, email, password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this.httpClient.post(this.endpoint + '/agents/login', JSON.stringify({\n          username,\n          email,\n          password\n        }), this.httpHeader).toPromise().then(result => {\n          localStorage.setItem(\"agent_auth\", JSON.stringify(result));\n          this.router.navigate(['/cases']);\n          console.log(\"correct\");\n        });\n      } catch (error) {\n        console.log('login error ln.52: ', error);\n      }\n    });\n  }\n\n  getAgents() {\n    // this.isLoading = true;\n    return this.httpClient.get(this.endpoint + '/agents', this.httpHeaderWithToken).pipe(retry(1), catchError(this.processError));\n  }\n\n  getAgent() {\n    const agentData = JSON.parse(localStorage.getItem('agent_auth') || '{}');\n    if (!agentData) return;\n    return this.httpClient.get(this.endpoint + '/agents/' + agentData.id, this.httpHeaderWithToken).pipe(retry(1), catchError(this.processError));\n  }\n\n  getAgentsByDepartment(agentDepartmentId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!agentDepartmentId) return;\n        const result = yield this.httpClient.get(this.endpoint + '/agents/' + agentDepartmentId + '/departmentId', this.httpHeaderWithToken).toPromise();\n        return result || [];\n      } catch (error) {\n        console.log(error);\n      }\n\n      return;\n    });\n  }\n\n  addAgent(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.httpClient.post(this.endpoint + '/agents/create', JSON.stringify(data), this.httpHeader).toPromise();\n      return result;\n    });\n  }\n\n  addAgent_FormData(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.isLoading = true;\n      const result = yield this.httpClient.post(this.endpoint + '/agents/create', data, this.httpHeader).toPromise();\n      this.isLoading = false;\n      return result;\n    });\n  }\n\n  updateAgent(agentData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const result = yield this.httpClient.put(this.endpoint + '/agents/' + agentData.id, JSON.stringify(agentData), this.httpHeader).toPromise();\n        return result;\n      } catch (error) {\n        console.log(error);\n      }\n\n      return;\n    });\n  }\n\n  updateAgent_FormData(agentId, data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.isLoading = true;\n      const result = yield this.httpClient.put(this.endpoint + '/agents/' + agentId, data, this.httpHeader).toPromise();\n      this.isLoading = false;\n      return result;\n    });\n  }\n\n  deleteAgent(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.httpClient.delete(this.endpoint + '/agents/' + id, this.httpHeader).toPromise();\n      return result;\n    });\n  }\n\n  processError(err) {\n    let message = '';\n\n    if (err.error instanceof ErrorEvent) {\n      message = err.error.message;\n    } else {\n      message = `Error Code: ${err.status}\\nMessage: ${err.message}`;\n    }\n\n    console.log(message);\n    return throwError(message);\n  }\n\n}\n\nAgentStore.ɵfac = function AgentStore_Factory(t) {\n  return new (t || AgentStore)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAgentStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AgentStore,\n  factory: AgentStore.ɵfac,\n  providedIn: 'root'\n});\n\n__decorate([observable], AgentStore.prototype, \"isLoading\", void 0);\n\n__decorate([observable], AgentStore.prototype, \"agent\", void 0);\n\n__decorate([observable], AgentStore.prototype, \"agentData\", void 0);\n\n__decorate([observable], AgentStore.prototype, \"selectedAgent\", void 0);\n\n__decorate([computed], AgentStore.prototype, \"isLoggedIn\", null);\n\n__decorate([action], AgentStore.prototype, \"login\", null);\n\n__decorate([action], AgentStore.prototype, \"getAgents\", null);\n\n__decorate([action], AgentStore.prototype, \"getAgentsByDepartment\", null);\n\n__decorate([action], AgentStore.prototype, \"addAgent\", null);\n\n__decorate([action], AgentStore.prototype, \"addAgent_FormData\", null);\n\n__decorate([action], AgentStore.prototype, \"updateAgent\", null);\n\n__decorate([action], AgentStore.prototype, \"updateAgent_FormData\", null);\n\n__decorate([action], AgentStore.prototype, \"deleteAgent\", null);","map":null,"metadata":{},"sourceType":"module"}