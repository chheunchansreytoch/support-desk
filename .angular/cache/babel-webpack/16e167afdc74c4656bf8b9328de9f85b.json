{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { action, computed, observable } from \"mobx\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class PriorityStore {\n  constructor(httpClient, router) {\n    var _a;\n\n    this.httpClient = httpClient;\n    this.router = router;\n    this.isLoading = false;\n    this.endpoint = 'http://localhost:3000/api';\n    this.httpHeader = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n      })\n    };\n    this.httpHeaderWithToken = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT',\n        'Authorization': 'Bearer ' + ((_a = this.priorityJSONMapping()) === null || _a === void 0 ? void 0 : _a.token)\n      })\n    };\n    this.getPriorities();\n  }\n\n  priorityJSONMapping() {\n    const result = localStorage.getItem(\"priority_auth\") ? JSON.parse(localStorage.getItem(\"priority_auth\") || '{}') : undefined;\n    return result;\n  }\n\n  get isLoggedIn() {\n    const priority = localStorage.getItem('priority_auth');\n    return priority != null ? true : false;\n  }\n\n  getPriorities() {\n    return this.httpClient.get(this.endpoint + '/priorities', this.httpHeaderWithToken).pipe(retry(1), catchError(this.processError));\n  }\n\n  getPriority(id, data) {\n    return this.httpClient.get(this.endpoint + '/priorities/' + id, this.httpHeader).pipe(retry(1), catchError(this.processError));\n  }\n\n  addPriority(data) {\n    return this.httpClient.post(this.endpoint + '/priorities/create', JSON.stringify(data), this.httpHeader).pipe(retry(1), catchError(this.processError));\n  } // @action\n  // updateUser(id, data): Observable<IManager> {\n  //   return this.httpClient.put<IManager>(this.endpoint + '/managers/' + id, JSON.stringify(data), this.httpHeader)\n  //   .pipe(\n  //     retry(1),\n  //     catchError(this.processError)\n  //   )\n  // }\n\n\n  deletePriority(id) {\n    return this.httpClient.delete(this.endpoint + '/priorities/' + id, this.httpHeader).pipe(retry(1), catchError(this.processError));\n  }\n\n  processError(err) {\n    let message = '';\n\n    if (err.error instanceof ErrorEvent) {\n      message = err.error.message;\n    } else {\n      message = `Error Code: ${err.priority}\\nMessage: ${err.message}`;\n    }\n\n    console.log(message);\n    return throwError(message);\n  }\n\n}\n\nPriorityStore.ɵfac = function PriorityStore_Factory(t) {\n  return new (t || PriorityStore)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nPriorityStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PriorityStore,\n  factory: PriorityStore.ɵfac,\n  providedIn: 'root'\n});\n\n__decorate([observable], PriorityStore.prototype, \"isLoading\", void 0);\n\n__decorate([observable], PriorityStore.prototype, \"priorities\", void 0);\n\n__decorate([computed], PriorityStore.prototype, \"isLoggedIn\", null);\n\n__decorate([action], PriorityStore.prototype, \"getPriorities\", null);\n\n__decorate([action], PriorityStore.prototype, \"getPriority\", null);\n\n__decorate([action], PriorityStore.prototype, \"addPriority\", null);\n\n__decorate([action], PriorityStore.prototype, \"deletePriority\", null);","map":null,"metadata":{},"sourceType":"module"}